<html lang="en">
<head>
<style>
body {
	margin: 0;
	padding: 0;
}
#controls {
	margin: 0;
	padding: 7px 5px;
	background: #EEEEEE;
	border-bottom: 1px solid #DDDDDD;
	font: 0.8em sans-serif;
}
#controls label {
	display: inline-block;
}
#controls label, #controls select, #controls button {
	margin: 3px 5px;
}
#output {
	font: 1em monospace;
	line-height: 1.4;
	margin: 20px;
}
#output .head {
	margin-top: 1em;
	font-weight: bolder;
	font-size: 1.5em;
}
#output .subhead {
	margin-top: 0.5em;
	font-weight: bolder;
}
.right {
	float: right;
}
</style>
<script src="src/Raffle.js"></script>
<script src="src/Graph.js"></script>
<script src="src/nsi.js"></script>
<script>

function money(v) {
	return '\u00A3' + v.toFixed(2);
}

function apr(monthly, capital) {
	return (Math.pow(1 + monthly / capital, 12) - 1) * 100;
}

function odds(p) {
	if(p >= 0.01) {
		return (p * 100).toFixed(2) + '%';
	} else if(p >= 1e-10) {
		return '~1 in ' + Math.round(1 / p);
	} else {
		return 'negligible';
	}
}

window.addEventListener('load', () => {
	const controlsForm = document.getElementById('controls');
	const raffleSelect = document.getElementById('raffle');
	const loadNSI = document.getElementById('load_nsi');
	const ticketsField = document.getElementById('tickets');
	const calculate = document.getElementById('calculate');
	const output = document.getElementById('output');

	const raffles = [];

	function add_dom(o, cls = '') {
		const d = document.createElement('div');
		d.appendChild(o);
		d.setAttribute('class', cls);
		output.appendChild(d);
		return d;
	}

	function add_message(m, cls = '') {
		return add_dom(document.createTextNode(m), cls);
	}

	function add_raffle(name, seed) {
		const index = raffles.length;
		raffles.push({
			name,
			raffle: Raffle.from(seed, {pCutoff: 1e-10}),
		});
		const opt = document.createElement('option');
		const txt = document.createTextNode(name);
		opt.appendChild(txt);
		opt.setAttribute('value', index);
		raffleSelect.appendChild(opt);
		return index;
	}

	function get_graph_pvalue_data(result) {
		const data = [{x: 0, y: 1}];
		let lastV = null;
		for(const i of result.values()) {
			const p = result.range_probability(i, Number.POSITIVE_INFINITY);
			if(lastV !== null) {
				data.push({x: lastV, y: p});
			}
			data.push({x: i, y: p});
			lastV = i;
		}
		data.push({x: lastV, y: 0});
		return data;
	}

	function run(raffle, tickets) {
		const games = [];
		if(!tickets) {
			for(let i = 1000; i <= 50000; i += 1000) {
				games.push(raffle.enter(i)
				.then((result1) => result1.pow(12, {pCutoff: 1e-10})
				.then((result12) => ({result1, result12})))
			);
			}
		} else {
			games.push(raffle.enter(tickets)
				.then((result1) => result1.pow(12, {pCutoff: 1e-10})
				.then((result12) => ({result1, result12})))
			);
		}

		add_message('Calculating for audience of ' + raffle.audience() + '\u2026');

		return Promise.all(games).then((allResults) => {
			const multi = (allResults.length > 1);

			const graphW = multi ? 300 : 800;
			const graphH = multi ? 40 : 100;
			const graphLimit = 10000;
			const graphRX = {max: graphLimit, min: 0};
			const graphRY = {max: 1, min: 0};

			for(const {result1, result12} of allResults) {
				const tickets = result1.tickets();
				add_message('Tickets: ' + tickets, 'head');

				const mean1 = result1.mean();
				const median1 = result1.median();
				const mode1 = result1.mode();

				add_message('1 Month', 'subhead');
				add_message(
					'Averages:'
					+ ' Mean: ' + money(mean1)
					+ ' (' + apr(mean1, tickets).toFixed(3) + '% APR)'
					+ ' Median: ' + money(median1)
					+ ' Mode: ' + money(mode1)
				);

				add_message(
					'Percentiles: '
					+ '0th = ' + money(result1.percentile(0)) + ', '
					+ '25th = ' + money(result1.percentile(25)) + ', '
					+ '50th = ' + money(result1.percentile(50)) + ', '
					+ '75th = ' + money(result1.percentile(75)) + ', '
					+ '100th = ' + money(result1.percentile(100))
				);

				const g1 = new Graph(graphW, graphH);
				g1.set(get_graph_pvalue_data(result1));
				g1.set_x_range(graphRX);
				g1.set_y_range(graphRY);
				g1.render();
				add_dom(g1.dom());
				add_message(
					'Odds: = ' + money(0) + ': '
					+ odds(result1.exact_probability(0))
					+ ', >= ' + money(graphLimit) + ': '
					+ odds(result1.range_probability(
						graphLimit,
						Number.POSITIVE_INFINITY
					))
				);

				const mean12 = result12.mean();
				const median12 = result12.median();
				const mode12 = result12.mode();

				add_message('12 Months', 'subhead');
				add_message(
					'Averages:'
					+ ' Mean: ' + money(mean12)
					+ ' (' + (mean12 * 100 / tickets).toFixed(3) + '% APR)'
					+ ' Median: ' + money(median12)
					+ ' (' + (median12 * 100 / tickets).toFixed(3) + '% APR)'
					+ ' Mode: ' + money(mode12)
					+ ' (' + (mode12 * 100 / tickets).toFixed(3) + '% APR)'
				);
				add_message(
					'Percentiles: '
					+ '0th = ' + money(result12.percentile(0)) + ', '
					+ '25th = ' + money(result12.percentile(25)) + ', '
					+ '50th = ' + money(result12.percentile(50)) + ', '
					+ '75th = ' + money(result12.percentile(75)) + ', '
					+ '100th = ' + money(result12.percentile(100))
				);

				const g12 = new Graph(graphW, graphH);
				g12.set(get_graph_pvalue_data(result12));
				g12.set_x_range(graphRX);
				g12.set_y_range(graphRY);
				g12.render();
				add_dom(g12.dom());
				add_message(
					'Odds: = ' + money(0) + ': '
					+ odds(result12.exact_probability(0))
					+ ', >= ' + money(graphLimit) + ': '
					+ odds(result12.range_probability(
						graphLimit,
						Number.POSITIVE_INFINITY
					))
				);
			}
		});
	}

	Raffle.set_engine(new Raffle.SharedWebWorkerEngine({workers: 8}));

	add_raffle('NS&I Premium Bonds Snapshot used by MSE', new NSI([
		{value: 1000000, count:       2},
		{value:  100000, count:       4},
		{value:   50000, count:      10},
		{value:   25000, count:      17},
		{value:   10000, count:      43},
		{value:    5000, count:      87},
		{value:    1000, count:    1677},
		{value:     500, count:    5031},
		{value:     100, count:   22984},
		{value:      50, count:   22984},
		{value:      25, count: 2879959},
		{value:       0, count: 71850560383},
	]));

	const basicRaffle = add_raffle('NS&I Premium Bonds Snapshot (March 2018)', new NSI([
		{value: 1000000, count:       2},
		{value:  100000, count:       5},
		{value:   50000, count:       8},
		{value:   25000, count:      19},
		{value:   10000, count:      46},
		{value:    5000, count:      92},
		{value:    1000, count:    1717},
		{value:     500, count:    5151},
		{value:     100, count:   23554},
		{value:      50, count:   23554},
		{value:      25, count: 2950583},
	], {audienceMultiplier: 24500}));

	raffleSelect.value = basicRaffle;

	let loadedNSI = false;
	loadNSI.addEventListener('click', () => {
		if(loadedNSI) {
			return;
		}
		loadedNSI = true;
		loadNSI.setAttribute('disabled', 'disabled');
		loadNSI.textContent = 'Loading\u2026';

		NSI.load().then(({last, next}) => {
			loadNSI.textContent = 'Loaded';
			add_raffle('Previous NS&I Raffle', last);
			const nextRaffle = add_raffle('Predicted Next NS&I Raffle', next);
			raffleSelect.value = nextRaffle;
		});
	});

	controlsForm.addEventListener('submit', (e) => {
		e.preventDefault();
		raffleSelect.setAttribute('disabled', 'disabled');
		calculate.setAttribute('disabled', 'disabled');

		while(output.childElementCount > 0) {
			output.removeChild(output.lastChild);
		}

		run(
			raffles[raffleSelect.value].raffle,
			Number.parseInt(ticketsField.value, 10)
		).then(() => {
			raffleSelect.removeAttribute('disabled');
			calculate.removeAttribute('disabled');
		});
	});

	add_message('Ready. Select options above and press Calculate to begin');
});
</script>
</head>
<body>
<form id="controls" action="#">
<button id="load_nsi" type="button" class="right" tabindex="2">Load latest prizes from NS&amp;I</button>
<select id="raffle" tabindex="1"></select>
<label>Tickets: <input id="tickets" type="number" min="0" max="50000" step="1" value="10000" placeholder="multi" tabindex="1" /></label>
<button id="calculate" type="submit" tabindex="1">Calculate</button>
</form>
<div id="output"></div>
</body>
</html>
